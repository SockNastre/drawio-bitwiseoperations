#
# Written By: SockNastre
# Date: 04/10/2021
#
# All information in this document is free to use as you wish.
#

===============================================================================
General
===============================================================================

Before reading this document, make sure you have read the document
"Textual Bitwise-Operations Setup" as that helps setup a basis for this.

So, sure, we setup our tBitOps and now we want to read them properly right?
This is not so simple as it sounds, we will discuss some algorithm approaches
we can use to grab variables, operations, operations in association with
variables.

Before getting into that, a variable in our standard is a value output. So if
we have the operation "A OR B", A and B are the variables here; they output
the numbers associated with them. Even though A and B on their own have no
operation being done, that itself is an operation... no operation!

Sticking with "A OR B", there is one more variable you may have missed. This
variable would be the entirety of "A OR B"! This operation results in the
output of a value, so it is a variable.

Now that you know what a variable is to our tool, an operation is simply the
bitwise operation being done to a variable or two variables.

===============================================================================
Basic Operation-Grabbing Algorithm
===============================================================================

To highlight the basics of our algorithm, let's look at a few examples ranging
from simple to more complex:

----------------------------------------
A OR B
----------------------------------------

    1. Detects first character is part of a variable, "A".
    2. Knows next character is space, then operation.
    3. Reads operation ending at next space, operation is read as "OR".
    4. Knows next character is space, then variable.
    5. Reads next variable as "B".

----------------------------------------
NOT A
----------------------------------------

    1. Detects operation as "NOT", this is detected because after reading the
    character "N" it checks if the character after is a space. Since it is
    not a space the rest of the characters until the next space must be an
    operation.
    2. Since "NOT" is a single-input operation, algorithm knows after next
	space a variable must exist.
    3. Reads next variable as "A".


----------------------------------------
NOT (A OR B)
----------------------------------------

    1. Detects operation as "NOT", this is detected because after reading the
    character "N" it checks if the character after is a space. Since it is
    not a space the rest of the characters until the next space must be an
    operation.
    2. Since "NOT" is a single-input operation, algorithm knows after next
	space a variable must exist.
    3. Sees that there exists an opening-parenthesis. Tool reads until closing-
	parenthesis.
	4. Reads next variable as "A OR B", marks it as its own operation based on
	length (it's not equal to 1).
	5. Reads "A OR B" like in the first example above...

Given this system of grabbing operations, it should be possible to make a
recursive system where, once data is managed at a smaller scale, it can be
easily managed on a larger scale.

===============================================================================
Storage of Operations + Variables
===============================================================================

For 2-input Operations: OBJECT1 + OBJECT2 + OPERATION
For 1-input Operations: OBJECT1 + OPERATION
